name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # Python versions to test against
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"] # Updated to more recent versions, feel free to adjust

    steps:
    - name: Checkout code
      # Use the latest v4 for checkout
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      # Use the latest v5 for setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        # Upgrade pip first
        python -m pip install --upgrade pip
        # Install core requirements
        pip install -r requirements.txt
        # Install development/test requirements (assuming requirements-dev.txt exists)
        pip install -r requirements-dev.txt

    - name: Cache pip dependencies
      # Use the latest v3 for cache
      # Note: Cache step is placed AFTER install so it saves the dependencies installed in the previous step.
      # For subsequent runs, it will attempt restore BEFORE install. GitHub Actions handles this flow.
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        # Key includes OS, Python version, and hash of both requirements files
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
        # Restore keys for fallback
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          ${{ runner.os }}-pip- # Fallback to any python version cache if specific fails

    - name: Lint code
      run: |
        # flake8 is installed via requirements-dev.txt now
        flake8 src tests

    - name: Run tests
      run: |
        # pytest is installed via requirements-dev.txt now
        pytest --cov=src --cov-report=xml

    - name: Upload coverage report
      # Use the latest v4 for upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }} # Include python version in artifact name
        path: coverage.xml
        # Optional: Set retention period (e.g., 5 days)
        retention-days: 5
